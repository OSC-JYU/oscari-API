{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T10:31:06.231Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T10:46:55.718Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: "Cannot read property 'ok' of undefined",
  params: { id: '17031' },
  path: '/api/ca/objects/17031',
  body: {
    attributes: {
      kayttopaikka: [ { kayttopaikka: 'joo' } ],
      kayttoaika: [ { kayttoaika: '18.5.-30.9.2017 ' } ]
    },
    relations: {}
  },
  error: TypeError: Cannot read property 'ok' of undefined
      at CA.editItem (/home/arihayri/Projects/oscari-API/app/CollectiveAccess.js:1055:20)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)
      at async /home/arihayri/Projects/oscari-API/app/index.js:385:16
      at async /home/arihayri/Projects/oscari-API/app/index.js:155:4
      at async /home/arihayri/Projects/oscari-API/app/index.js:127:2
      at async handleError (/home/arihayri/Projects/oscari-API/app/index.js:102:3)
      at async cors (/home/arihayri/Projects/oscari-API/node_modules/@koa/cors/index.js:98:16)
      at async session (/home/arihayri/Projects/oscari-API/node_modules/koa-session/index.js:41:7),
  level: 'error',
  timestamp: '2021-03-22T10:47:05.134Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T10:47:44.502Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: "Cannot read property 'ok' of undefined",
  params: { id: '17031' },
  path: '/api/ca/objects/17031',
  body: {
    attributes: {
      kayttopaikka: [ { kayttopaikka: 'joo' } ],
      kayttoaika: [ { kayttoaika: '18.5.-30.9.2017 ' } ]
    },
    relations: {}
  },
  error: TypeError: Cannot read property 'ok' of undefined
      at CA.editItem (/home/arihayri/Projects/oscari-API/app/CollectiveAccess.js:1055:20)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)
      at async /home/arihayri/Projects/oscari-API/app/index.js:385:16
      at async /home/arihayri/Projects/oscari-API/app/index.js:155:4
      at async /home/arihayri/Projects/oscari-API/app/index.js:127:2
      at async handleError (/home/arihayri/Projects/oscari-API/app/index.js:102:3)
      at async cors (/home/arihayri/Projects/oscari-API/node_modules/@koa/cors/index.js:98:16)
      at async session (/home/arihayri/Projects/oscari-API/node_modules/koa-session/index.js:41:7),
  level: 'error',
  timestamp: '2021-03-22T10:47:50.213Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T10:51:00.404Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T11:03:21.671Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T11:07:17.755Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T11:10:00.021Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T11:14:14.163Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T11:15:04.956Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T11:15:29.179Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T11:17:50.797Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T11:54:07.095Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T11:59:28.328Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T12:00:28.153Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T12:01:24.229Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T12:07:16.005Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T13:41:31.355Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T13:42:26.370Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T13:43:06.316Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T13:44:14.817Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T13:44:50.455Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T13:45:42.571Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T13:47:28.111Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T13:47:54.260Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T13:48:33.634Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T13:51:45.043Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T13:52:18.981Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T13:55:50.655Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T13:57:13.050Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T13:57:18.685Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T13:57:57.602Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T14:18:59.711Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'virhe',
  params: { id: '17031' },
  path: '/api/ca/objects/17031',
  body: {
    attributes: { kayttoaika: [ { kayttoaika: '18.5.-30.9.2017 ' } ] },
    relations: {}
  },
  error: 'virhe',
  level: 'error',
  timestamp: '2021-03-22T14:19:10.845Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'virhe',
  params: { id: '17031' },
  path: '/api/ca/objects/17031',
  body: {
    attributes: { kayttoaika: [ { kayttoaika: '18.5.-30.9.2017 ' } ] },
    relations: {
      ca_entities: [
        { entity_id: 8036, type_id: '101', relation_info: 'lisätieto' },
        { entity_id: 4175, type_id: '101' },
        { entity_id: 7972, type_id: '171' },
        { entity_id: 7971, type_id: '182' }
      ]
    }
  },
  error: 'virhe',
  level: 'error',
  timestamp: '2021-03-22T14:20:14.862Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T14:21:40.991Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'Error in edit',
  params: { id: '17031' },
  path: '/api/ca/objects/17031',
  body: {
    attributes: {
      kayttopaikka: [ { kayttopaikka: 'öölöllö' } ],
      kayttoaika: [ { kayttoaika: '18.5.-30.9.2017 ' } ]
    },
    relations: {}
  },
  error: 'Error in edit',
  level: 'error',
  timestamp: '2021-03-22T14:21:53.019Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T14:23:04.125Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-22T14:23:41.735Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: [ 'Käyttöaika is invalid' ],
  params: { id: '17031' },
  path: '/api/ca/objects/17031',
  body: {
    attributes: { kayttoaika: [ { kayttoaika: '18.5.-30.9.2017 ' } ] },
    relations: {}
  },
  error: [ 'Käyttöaika is invalid' ],
  level: 'error',
  timestamp: '2021-03-22T14:23:54.670Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: [ 'Käyttöaika is invalid' ],
  params: { id: '17031' },
  path: '/api/ca/objects/17031',
  body: {
    attributes: {
      kayttopaikka: [ { kayttopaikka: 'lkjh' } ],
      kayttoaika: [ { kayttoaika: '18.5.-30.9.2017 ' } ]
    },
    relations: {}
  },
  error: [ 'Käyttöaika is invalid' ],
  level: 'error',
  timestamp: '2021-03-22T14:27:27.703Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: [ 'Käyttöaika is invalid' ],
  params: { id: '17031' },
  path: '/api/ca/objects/17031',
  body: {
    attributes: {
      kayttopaikka: [ { kayttopaikka: 'öö' } ],
      kayttoaika: [ { kayttoaika: '18.5.-30.9.2017 ' } ]
    },
    relations: {}
  },
  error: [ 'Käyttöaika is invalid' ],
  level: 'error',
  timestamp: '2021-03-22T14:27:53.335Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'IDNO not found!',
  params: { lot_id: '1234' },
  path: '/api/ca/idno/lots/1234/check',
  body: {},
  error: { message: 'IDNO not found!', status: 404 },
  level: 'error',
  timestamp: '2021-03-22T14:41:33.105Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-23T06:59:29.344Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'CollectiveAccess login failed',
  params: {},
  path: '/api/ca/login',
  body: {},
  error: 'CollectiveAccess login failed',
  level: 'error',
  timestamp: '2021-03-23T07:00:09.314Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'CollectiveAccess login failed',
  params: {},
  path: '/api/ca/login',
  body: {},
  error: 'CollectiveAccess login failed',
  level: 'error',
  timestamp: '2021-03-23T07:35:26.893Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T07:35:26.911Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'CollectiveAccess login failed',
  params: {},
  path: '/api/ca/login',
  body: {},
  error: 'CollectiveAccess login failed',
  level: 'error',
  timestamp: '2021-03-23T07:35:26.985Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T07:35:27.026Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T07:35:27.063Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T07:35:27.082Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'CollectiveAccess login failed',
  params: {},
  path: '/api/ca/login',
  body: {},
  error: 'CollectiveAccess login failed',
  level: 'error',
  timestamp: '2021-03-23T07:43:12.953Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T07:43:12.970Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'CollectiveAccess login failed',
  params: {},
  path: '/api/ca/login',
  body: {},
  error: 'CollectiveAccess login failed',
  level: 'error',
  timestamp: '2021-03-23T07:43:13.055Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T07:43:13.074Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T07:43:13.098Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T07:43:13.117Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'CollectiveAccess login failed',
  params: {},
  path: '/api/ca/login',
  body: {},
  error: 'CollectiveAccess login failed',
  level: 'error',
  timestamp: '2021-03-23T07:44:54.571Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T07:44:54.590Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'CollectiveAccess login failed',
  params: {},
  path: '/api/ca/login',
  body: {},
  error: 'CollectiveAccess login failed',
  level: 'error',
  timestamp: '2021-03-23T07:44:54.684Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T07:44:54.704Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T07:44:54.724Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T07:44:54.746Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'CollectiveAccess login failed',
  params: {},
  path: '/api/ca/login',
  body: {},
  error: 'CollectiveAccess login failed',
  level: 'error',
  timestamp: '2021-03-23T08:26:42.567Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T08:26:42.585Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'CollectiveAccess login failed',
  params: {},
  path: '/api/ca/login',
  body: {},
  error: 'CollectiveAccess login failed',
  level: 'error',
  timestamp: '2021-03-23T08:26:42.762Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T08:26:42.783Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T08:26:42.799Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T08:26:42.817Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-23T08:27:26.029Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'CollectiveAccess login failed',
  params: {},
  path: '/api/ca/login',
  body: {},
  error: 'CollectiveAccess login failed',
  level: 'error',
  timestamp: '2021-03-23T08:27:29.564Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T08:27:29.582Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'CollectiveAccess login failed',
  params: {},
  path: '/api/ca/login',
  body: {},
  error: 'CollectiveAccess login failed',
  level: 'error',
  timestamp: '2021-03-23T08:27:29.701Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T08:27:29.740Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T08:27:29.774Z'
}
{
  user: 'ari.hayrinen@jyu.fi',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T08:27:29.798Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-23T08:55:35.526Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-23T08:59:30.152Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-23T08:59:37.605Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T08:59:41.806Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T08:59:42.079Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T09:04:11.319Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T09:04:11.572Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T09:04:20.564Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T09:04:20.793Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T09:07:53.909Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T09:07:54.170Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T09:22:50.877Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T09:22:51.083Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T09:25:10.844Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T09:25:11.058Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T09:25:59.376Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T09:25:59.546Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T09:26:35.101Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T09:26:35.308Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T10:06:14.966Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T10:07:27.124Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T10:10:07.815Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T10:10:41.330Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T10:13:53.376Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T10:14:22.752Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T10:23:13.303Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-23T10:42:26.654Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-23T10:42:35.373Z'
}
{
  user: 'test@user.com',
  message: "Cannot read property 'ok' of undefined",
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { id: 0, birthdate: 'kjhgkh23142' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'Ari', surname: '', locale: 'fi_FI' } ],
    type_id: 82
  },
  error: TypeError: Cannot read property 'ok' of undefined
      at CA.createItem (/home/arihayri/Projects/oscari-API/app/CollectiveAccess.js:932:20)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)
      at async /home/arihayri/Projects/oscari-API/app/index.js:403:16
      at async /home/arihayri/Projects/oscari-API/app/index.js:155:4
      at async /home/arihayri/Projects/oscari-API/app/index.js:127:2
      at async handleError (/home/arihayri/Projects/oscari-API/app/index.js:102:3)
      at async cors (/home/arihayri/Projects/oscari-API/node_modules/@koa/cors/index.js:98:16)
      at async session (/home/arihayri/Projects/oscari-API/node_modules/koa-session/index.js:41:7),
  level: 'error',
  timestamp: '2021-03-23T10:42:39.042Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-23T10:43:10.596Z'
}
{
  user: 'test@user.com',
  message: [ 'syntynyt is invalid' ],
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { id: 0, birthdate: 'kjhgkh23142' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'Ari', surname: '', locale: 'fi_FI' } ],
    type_id: 82
  },
  error: [ 'syntynyt is invalid' ],
  level: 'error',
  timestamp: '2021-03-23T10:43:14.269Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T10:44:25.459Z'
}
{
  user: 'test@user.com',
  message: 'Error in item creation',
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '-71', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: 'Error in item creation',
  level: 'error',
  timestamp: '2021-03-23T10:44:26.190Z'
}
{
  user: 'test@user.com',
  message: 'Error in item creation',
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: { preferred_labels: [], elinaika: [ { id: 0, birthdate: '-71' } ] },
    relations: {},
    preferred_labels: [ { forename: 'Mariska', surname: '', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: 'Error in item creation',
  level: 'error',
  timestamp: '2021-03-23T10:45:19.179Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-23T10:47:00.738Z'
}
{
  user: 'test@user.com',
  message: 'Error in item creation',
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: { preferred_labels: [], elinaika: [ { id: 0, birthdate: '-71' } ] },
    relations: {},
    preferred_labels: [ { forename: 'Mariska', surname: '', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: 'Error in item creation',
  level: 'error',
  timestamp: '2021-03-23T10:47:08.246Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-23T10:48:25.727Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T10:48:30.833Z'
}
{
  user: 'test@user.com',
  message: 'Error in item creation',
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '-71', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: 'Error in item creation',
  level: 'error',
  timestamp: '2021-03-23T10:48:31.288Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T11:02:46.870Z'
}
{
  user: 'test@user.com',
  message: 'Error in item creation',
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '-71', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: 'Error in item creation',
  level: 'error',
  timestamp: '2021-03-23T11:02:47.461Z'
}
{
  user: 'test@user.com',
  message: 'Missing link type',
  params: {},
  path: '/api/ca/object_lots',
  body: {
    attributes: { lot_content: [ { lot_content: 'All kind of test material' } ] },
    relations: {
      ca_entities: [ { id: '1', relation_info: 'This is a test donater' } ]
    },
    status: 'saapunut',
    preferred_labels: [ { name: 'First donation', locale: 'fi_FI' } ],
    type_id: 57
  },
  error: 'Missing link type',
  level: 'error',
  timestamp: '2021-03-23T11:02:47.476Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T11:03:42.030Z'
}
{
  user: 'test@user.com',
  message: 'Error in item creation',
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '-71', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: 'Error in item creation',
  level: 'error',
  timestamp: '2021-03-23T11:03:42.518Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T11:17:22.678Z'
}
{
  user: 'test@user.com',
  message: 'Error in item creation',
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '-71', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: 'Error in item creation',
  level: 'error',
  timestamp: '2021-03-23T11:17:23.284Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T11:53:03.984Z'
}
{
  user: 'test@user.com',
  message: 'Error in item creation',
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '-71', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: 'Error in item creation',
  level: 'error',
  timestamp: '2021-03-23T11:53:04.848Z'
}
{
  user: 'test@user.com',
  message: 'IDNO not found!',
  params: { lot_id: '1' },
  path: '/api/ca/idno/lots/1/check',
  body: {},
  error: { message: 'IDNO not found!', status: 404 },
  level: 'error',
  timestamp: '2021-03-23T11:54:23.458Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T11:59:40.848Z'
}
{
  user: 'test@user.com',
  message: 'Error in item creation',
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '-71', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: 'Error in item creation',
  level: 'error',
  timestamp: '2021-03-23T11:59:41.759Z'
}
{
  user: 'test@user.com',
  message: [ 'Identifier 1:1 already exists and duplicates are not permitted' ],
  params: {},
  path: '/api/ca/objects',
  body: {
    attributes: {
      yleisnimi: [ { yleisnimi: 'bicycle' } ],
      description: [
        {
          description: 'An 1885 Whippet safety bicycle\n' +
            'By Science museum, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=7708717'
        }
      ],
      pvm_cont: [ { pvm: '1885-1888' } ]
    },
    relations: {
      ca_entities: [
        {
          id: '22',
          display_label: 'Linley and Briggs',
          type_id: '182'
        }
      ]
    },
    preferred_labels: [ { name: 'Whippet', locale: 'fi_FI' } ],
    lot_id: 1,
    type_id: 23,
    idno: '1:1'
  },
  error: [ 'Identifier 1:1 already exists and duplicates are not permitted' ],
  level: 'error',
  timestamp: '2021-03-23T11:59:42.357Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T12:00:10.350Z'
}
{
  user: 'test@user.com',
  message: 'Error in item creation',
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '-71', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: 'Error in item creation',
  level: 'error',
  timestamp: '2021-03-23T12:00:11.109Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T12:00:59.056Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T12:02:28.004Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T12:04:11.493Z'
}
{
  user: 'test@user.com',
  message: [ 'syntynyt is invalid' ],
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971 invalid', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: [ 'syntynyt is invalid' ],
  level: 'error',
  timestamp: '2021-03-23T12:04:12.477Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T12:30:29.236Z'
}
{
  user: 'test@user.com',
  message: 'Request failed with status code 401',
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: Error: Request failed with status code 401
      at createError (/home/arihayri/Projects/oscari-API/node_modules/axios/lib/core/createError.js:16:15)
      at settle (/home/arihayri/Projects/oscari-API/node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (/home/arihayri/Projects/oscari-API/node_modules/axios/lib/adapters/http.js:260:11)
      at IncomingMessage.emit (events.js:326:22)
      at endReadableNT (_stream_readable.js:1241:12)
      at processTicksAndRejections (internal/process/task_queues.js:84:21) {
    config: {
      url: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
      method: 'put',
      data: '{"intrinsic_fields":{"type_id":80},"attributes":{"preferred_labels":[],"elinaika":[{"birthdate":"1971","syntymapaikka":"Juva"}]},"related":{},"preferred_labels":[{"forename":"First","surname":"Person","locale":"fi_FI"}]}',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json;charset=utf-8',
        'User-Agent': 'axios/0.21.1',
        'Content-Length': 220
      },
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      adapter: [Function: httpAdapter],
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: [Function: validateStatus]
    },
    request: ClientRequest {
      _events: [Object: null prototype] {
        socket: [Function],
        abort: [Function],
        aborted: [Function],
        connect: [Function],
        error: [Function],
        timeout: [Function],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        readable: true,
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: {
            next: {
              next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish]
            },
            entry: null,
            finish: [Function: bound onCorkedFinish]
          }
        },
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 21027,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      connection: Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        readable: true,
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: {
            next: {
              next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish]
            },
            entry: null,
            finish: [Function: bound onCorkedFinish]
          }
        },
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 21027,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _header: 'PUT /providence/service.php/item/ca_entities?pretty=1&authToken=undefined HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json;charset=utf-8\r\n' +
        'User-Agent: axios/0.21.1\r\n' +
        'Content-Length: 220\r\n' +
        'Host: localhost\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: noopPendingOutput],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: { path: null },
        requests: {},
        sockets: {
          'localhost:80:': [
            Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'localhost',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: null,
                pipesCount: 0,
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                emitClose: false,
                autoDestroy: false,
                destroyed: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              readable: true,
              _events: [Object: null prototype] {
                end: [Function: onReadableStreamEnd],
                free: [Function: onFree],
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                bufferedRequest: null,
                lastBufferedRequest: null,
                pendingcb: 1,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: false,
                bufferedRequestCount: 0,
                corkedRequestsFree: {
                  next: {
                    next: null,
                    entry: null,
                    finish: [Function: bound onCorkedFinish]
                  },
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                }
              },
              writable: false,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: null,
              _httpMessage: [Circular],
              [Symbol(asyncId)]: 21027,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular]
              },
              [Symbol(kSetNoDelay)]: false,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        scheduling: 'fifo',
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'PUT',
      insecureHTTPParser: undefined,
      path: '/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: true,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        readable: false,
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          error: [Function: handleStreamError]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        socket: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21027,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        connection: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21027,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: {
          date: 'Tue, 23 Mar 2021 12:30:29 GMT',
          server: 'Apache/2.4.29 (Ubuntu)',
          'set-cookie': [
            'collectiveaccess=5056252a-2d61-4d27-9704-6ab00356f11b; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence'
          ],
          'access-control-allow-origin': '*',
          'cache-control': 'no-cache, must-revalidate',
          expires: 'Mon, 26 Jul 1997 05:00:00 GMT',
          'www-authenticate': 'Basic realm="CollectiveAccess Service API"',
          'content-length': '0',
          connection: 'close',
          'content-type': 'text/html; charset=UTF-8'
        },
        rawHeaders: [
          'Date',
          'Tue, 23 Mar 2021 12:30:29 GMT',
          'Server',
          'Apache/2.4.29 (Ubuntu)',
          'Set-Cookie',
          'collectiveaccess=5056252a-2d61-4d27-9704-6ab00356f11b; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence',
          'Access-Control-Allow-Origin',
          '*',
          'Cache-Control',
          'no-cache, must-revalidate',
          'Expires',
          'Mon, 26 Jul 1997 05:00:00 GMT',
          'WWW-Authenticate',
          'Basic realm="CollectiveAccess Service API"',
          'Content-Length',
          '0',
          'Connection',
          'close',
          'Content-Type',
          'text/html; charset=UTF-8'
        ],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 401,
        statusMessage: 'Access denied',
        client: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21027,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _consuming: false,
        _dumped: false,
        req: [Circular],
        responseUrl: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
        redirects: [],
        [Symbol(kCapture)]: false
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 0,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: {
            next: null,
            entry: null,
            finish: [Function: bound onCorkedFinish]
          }
        },
        writable: true,
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'http:',
          path: '/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
          method: 'PUT',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json;charset=utf-8',
            'User-Agent': 'axios/0.21.1',
            'Content-Length': 220
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'localhost',
          port: null,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',        'BIND',        'CHECKOUT',
                'CONNECT',    'COPY',        'DELETE',
                'GET',        'HEAD',        'LINK',
                'LOCK',       'M-SEARCH',    'MERGE',
                'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
                'MOVE',       'NOTIFY',      'OPTIONS',
                'PATCH',      'POST',        'PRI',
                'PROPFIND',   'PROPPATCH',   'PURGE',
                'PUT',        'REBIND',      'REPORT',
                'SEARCH',     'SOURCE',      'SUBSCRIBE',
                'TRACE',      'UNBIND',      'UNLINK',
                'UNLOCK',     'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Unordered Collection',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: { path: null },
                requests: {},
                sockets: {},
                freeSockets: {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                scheduling: 'fifo',
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/providence/service.php/item/ca_entities',
          search: '?pretty=1&authToken=undefined'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 220,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function],
        _currentRequest: [Circular],
        _currentUrl: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json;charset=utf-8' ],
        'user-agent': [ 'User-Agent', 'axios/0.21.1' ],
        'content-length': [ 'Content-Length', 220 ],
        host: [ 'Host', 'localhost' ]
      }
    },
    response: {
      status: 401,
      statusText: 'Access denied',
      headers: {
        date: 'Tue, 23 Mar 2021 12:30:29 GMT',
        server: 'Apache/2.4.29 (Ubuntu)',
        'set-cookie': [
          'collectiveaccess=5056252a-2d61-4d27-9704-6ab00356f11b; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence'
        ],
        'access-control-allow-origin': '*',
        'cache-control': 'no-cache, must-revalidate',
        expires: 'Mon, 26 Jul 1997 05:00:00 GMT',
        'www-authenticate': 'Basic realm="CollectiveAccess Service API"',
        'content-length': '0',
        connection: 'close',
        'content-type': 'text/html; charset=UTF-8'
      },
      config: {
        url: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
        method: 'put',
        data: '{"intrinsic_fields":{"type_id":80},"attributes":{"preferred_labels":[],"elinaika":[{"birthdate":"1971","syntymapaikka":"Juva"}]},"related":{},"preferred_labels":[{"forename":"First","surname":"Person","locale":"fi_FI"}]}',
        headers: {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json;charset=utf-8',
          'User-Agent': 'axios/0.21.1',
          'Content-Length': 220
        },
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        adapter: [Function: httpAdapter],
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        validateStatus: [Function: validateStatus]
      },
      request: ClientRequest {
        _events: [Object: null prototype] {
          socket: [Function],
          abort: [Function],
          aborted: [Function],
          connect: [Function],
          error: [Function],
          timeout: [Function],
          prefinish: [Function: requestOnPrefinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21027,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        connection: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21027,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _header: 'PUT /providence/service.php/item/ca_entities?pretty=1&authToken=undefined HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json;charset=utf-8\r\n' +
          'User-Agent: axios/0.21.1\r\n' +
          'Content-Length: 220\r\n' +
          'Host: localhost\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: noopPendingOutput],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: { path: null },
          requests: {},
          sockets: {
            'localhost:80:': [
              Socket {
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'localhost',
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: null,
                  pipesCount: 0,
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  emitClose: false,
                  autoDestroy: false,
                  destroyed: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                readable: true,
                _events: [Object: null prototype] {
                  end: [Function: onReadableStreamEnd],
                  free: [Function: onFree],
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  bufferedRequest: null,
                  lastBufferedRequest: null,
                  pendingcb: 1,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: false,
                  bufferedRequestCount: 0,
                  corkedRequestsFree: {
                    next: {
                      next: null,
                      entry: null,
                      finish: [Function: bound onCorkedFinish]
                    },
                    entry: null,
                    finish: [Function: bound onCorkedFinish]
                  }
                },
                writable: false,
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                parser: null,
                _httpMessage: [Circular],
                [Symbol(asyncId)]: 21027,
                [Symbol(kHandle)]: TCP {
                  reading: true,
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular]
                },
                [Symbol(kSetNoDelay)]: false,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          scheduling: 'fifo',
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'PUT',
        insecureHTTPParser: undefined,
        path: '/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: false,
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            data: [Function: handleStreamData],
            error: [Function: handleStreamError]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          socket: Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            readable: true,
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: {
                next: {
                  next: null,
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                },
                entry: null,
                finish: [Function: bound onCorkedFinish]
              }
            },
            writable: false,
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular],
            [Symbol(asyncId)]: 21027,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular]
            },
            [Symbol(kSetNoDelay)]: false,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          },
          connection: Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            readable: true,
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: {
                next: {
                  next: null,
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                },
                entry: null,
                finish: [Function: bound onCorkedFinish]
              }
            },
            writable: false,
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular],
            [Symbol(asyncId)]: 21027,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular]
            },
            [Symbol(kSetNoDelay)]: false,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            date: 'Tue, 23 Mar 2021 12:30:29 GMT',
            server: 'Apache/2.4.29 (Ubuntu)',
            'set-cookie': [
              'collectiveaccess=5056252a-2d61-4d27-9704-6ab00356f11b; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence'
            ],
            'access-control-allow-origin': '*',
            'cache-control': 'no-cache, must-revalidate',
            expires: 'Mon, 26 Jul 1997 05:00:00 GMT',
            'www-authenticate': 'Basic realm="CollectiveAccess Service API"',
            'content-length': '0',
            connection: 'close',
            'content-type': 'text/html; charset=UTF-8'
          },
          rawHeaders: [
            'Date',
            'Tue, 23 Mar 2021 12:30:29 GMT',
            'Server',
            'Apache/2.4.29 (Ubuntu)',
            'Set-Cookie',
            'collectiveaccess=5056252a-2d61-4d27-9704-6ab00356f11b; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence',
            'Access-Control-Allow-Origin',
            '*',
            'Cache-Control',
            'no-cache, must-revalidate',
            'Expires',
            'Mon, 26 Jul 1997 05:00:00 GMT',
            'WWW-Authenticate',
            'Basic realm="CollectiveAccess Service API"',
            'Content-Length',
            '0',
            'Connection',
            'close',
            'Content-Type',
            'text/html; charset=UTF-8'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 401,
          statusMessage: 'Access denied',
          client: Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            readable: true,
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: {
                next: {
                  next: null,
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                },
                entry: null,
                finish: [Function: bound onCorkedFinish]
              }
            },
            writable: false,
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular],
            [Symbol(asyncId)]: 21027,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular]
            },
            [Symbol(kSetNoDelay)]: false,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          },
          _consuming: false,
          _dumped: false,
          req: [Circular],
          responseUrl: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
          redirects: [],
          [Symbol(kCapture)]: false
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 0,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: true,
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'http:',
            path: '/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
            method: 'PUT',
            headers: {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json;charset=utf-8',
              'User-Agent': 'axios/0.21.1',
              'Content-Length': 220
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'localhost',
            port: null,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',        'BIND',        'CHECKOUT',
                  'CONNECT',    'COPY',        'DELETE',
                  'GET',        'HEAD',        'LINK',
                  'LOCK',       'M-SEARCH',    'MERGE',
                  'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
                  'MOVE',       'NOTIFY',      'OPTIONS',
                  'PATCH',      'POST',        'PRI',
                  'PROPFIND',   'PROPPATCH',   'PURGE',
                  'PUT',        'REBIND',      'REPORT',
                  'SEARCH',     'SOURCE',      'SUBSCRIBE',
                  'TRACE',      'UNBIND',      'UNLINK',
                  'UNLOCK',     'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Unordered Collection',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: { path: null },
                  requests: {},
                  sockets: {},
                  freeSockets: {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  scheduling: 'fifo',
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/providence/service.php/item/ca_entities',
            search: '?pretty=1&authToken=undefined'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 220,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function],
          _currentRequest: [Circular],
          _currentUrl: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json;charset=utf-8' ],
          'user-agent': [ 'User-Agent', 'axios/0.21.1' ],
          'content-length': [ 'Content-Length', 220 ],
          host: [ 'Host', 'localhost' ]
        }
      },
      data: ''
    },
    isAxiosError: true,
    toJSON: [Function: toJSON]
  },
  level: 'error',
  timestamp: '2021-03-23T12:30:29.338Z'
}
{
  user: 'test@user.com',
  message: 'Request failed with status code 401',
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1884', syntymapaikka: 'London' } ]
    },
    relations: {},
    preferred_labels: [ { forename: '', surname: 'Linley and Briggs', locale: 'fi_FI' } ],
    type_id: 81
  },
  error: Error: Request failed with status code 401
      at createError (/home/arihayri/Projects/oscari-API/node_modules/axios/lib/core/createError.js:16:15)
      at settle (/home/arihayri/Projects/oscari-API/node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (/home/arihayri/Projects/oscari-API/node_modules/axios/lib/adapters/http.js:260:11)
      at IncomingMessage.emit (events.js:326:22)
      at endReadableNT (_stream_readable.js:1241:12)
      at processTicksAndRejections (internal/process/task_queues.js:84:21) {
    config: {
      url: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
      method: 'put',
      data: '{"intrinsic_fields":{"type_id":81},"attributes":{"preferred_labels":[],"elinaika":[{"birthdate":"1884","syntymapaikka":"London"}]},"related":{},"preferred_labels":[{"forename":"","surname":"Linley and Briggs","locale":"fi_FI"}]}',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json;charset=utf-8',
        'User-Agent': 'axios/0.21.1',
        'Content-Length': 228
      },
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      adapter: [Function: httpAdapter],
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: [Function: validateStatus]
    },
    request: ClientRequest {
      _events: [Object: null prototype] {
        socket: [Function],
        abort: [Function],
        aborted: [Function],
        connect: [Function],
        error: [Function],
        timeout: [Function],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        readable: true,
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: {
            next: {
              next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish]
            },
            entry: null,
            finish: [Function: bound onCorkedFinish]
          }
        },
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 21068,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      connection: Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        readable: true,
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: {
            next: {
              next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish]
            },
            entry: null,
            finish: [Function: bound onCorkedFinish]
          }
        },
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 21068,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _header: 'PUT /providence/service.php/item/ca_entities?pretty=1&authToken=undefined HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json;charset=utf-8\r\n' +
        'User-Agent: axios/0.21.1\r\n' +
        'Content-Length: 228\r\n' +
        'Host: localhost\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: noopPendingOutput],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: { path: null },
        requests: {},
        sockets: {
          'localhost:80:': [
            Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'localhost',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: null,
                pipesCount: 0,
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                emitClose: false,
                autoDestroy: false,
                destroyed: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              readable: true,
              _events: [Object: null prototype] {
                end: [Function: onReadableStreamEnd],
                free: [Function: onFree],
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                bufferedRequest: null,
                lastBufferedRequest: null,
                pendingcb: 1,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: false,
                bufferedRequestCount: 0,
                corkedRequestsFree: {
                  next: {
                    next: null,
                    entry: null,
                    finish: [Function: bound onCorkedFinish]
                  },
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                }
              },
              writable: false,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: null,
              _httpMessage: [Circular],
              [Symbol(asyncId)]: 21068,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular]
              },
              [Symbol(kSetNoDelay)]: false,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        scheduling: 'fifo',
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'PUT',
      insecureHTTPParser: undefined,
      path: '/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: true,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        readable: false,
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          error: [Function: handleStreamError]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        socket: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21068,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        connection: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21068,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: {
          date: 'Tue, 23 Mar 2021 12:30:29 GMT',
          server: 'Apache/2.4.29 (Ubuntu)',
          'set-cookie': [
            'collectiveaccess=33981475-ba59-4274-a861-24bd3e234a5a; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence'
          ],
          'access-control-allow-origin': '*',
          'cache-control': 'no-cache, must-revalidate',
          expires: 'Mon, 26 Jul 1997 05:00:00 GMT',
          'www-authenticate': 'Basic realm="CollectiveAccess Service API"',
          'content-length': '0',
          connection: 'close',
          'content-type': 'text/html; charset=UTF-8'
        },
        rawHeaders: [
          'Date',
          'Tue, 23 Mar 2021 12:30:29 GMT',
          'Server',
          'Apache/2.4.29 (Ubuntu)',
          'Set-Cookie',
          'collectiveaccess=33981475-ba59-4274-a861-24bd3e234a5a; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence',
          'Access-Control-Allow-Origin',
          '*',
          'Cache-Control',
          'no-cache, must-revalidate',
          'Expires',
          'Mon, 26 Jul 1997 05:00:00 GMT',
          'WWW-Authenticate',
          'Basic realm="CollectiveAccess Service API"',
          'Content-Length',
          '0',
          'Connection',
          'close',
          'Content-Type',
          'text/html; charset=UTF-8'
        ],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 401,
        statusMessage: 'Access denied',
        client: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21068,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _consuming: false,
        _dumped: false,
        req: [Circular],
        responseUrl: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
        redirects: [],
        [Symbol(kCapture)]: false
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 0,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: {
            next: null,
            entry: null,
            finish: [Function: bound onCorkedFinish]
          }
        },
        writable: true,
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'http:',
          path: '/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
          method: 'PUT',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json;charset=utf-8',
            'User-Agent': 'axios/0.21.1',
            'Content-Length': 228
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'localhost',
          port: null,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',        'BIND',        'CHECKOUT',
                'CONNECT',    'COPY',        'DELETE',
                'GET',        'HEAD',        'LINK',
                'LOCK',       'M-SEARCH',    'MERGE',
                'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
                'MOVE',       'NOTIFY',      'OPTIONS',
                'PATCH',      'POST',        'PRI',
                'PROPFIND',   'PROPPATCH',   'PURGE',
                'PUT',        'REBIND',      'REPORT',
                'SEARCH',     'SOURCE',      'SUBSCRIBE',
                'TRACE',      'UNBIND',      'UNLINK',
                'UNLOCK',     'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Unordered Collection',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: { path: null },
                requests: {},
                sockets: {},
                freeSockets: {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                scheduling: 'fifo',
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/providence/service.php/item/ca_entities',
          search: '?pretty=1&authToken=undefined'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 228,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function],
        _currentRequest: [Circular],
        _currentUrl: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json;charset=utf-8' ],
        'user-agent': [ 'User-Agent', 'axios/0.21.1' ],
        'content-length': [ 'Content-Length', 228 ],
        host: [ 'Host', 'localhost' ]
      }
    },
    response: {
      status: 401,
      statusText: 'Access denied',
      headers: {
        date: 'Tue, 23 Mar 2021 12:30:29 GMT',
        server: 'Apache/2.4.29 (Ubuntu)',
        'set-cookie': [
          'collectiveaccess=33981475-ba59-4274-a861-24bd3e234a5a; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence'
        ],
        'access-control-allow-origin': '*',
        'cache-control': 'no-cache, must-revalidate',
        expires: 'Mon, 26 Jul 1997 05:00:00 GMT',
        'www-authenticate': 'Basic realm="CollectiveAccess Service API"',
        'content-length': '0',
        connection: 'close',
        'content-type': 'text/html; charset=UTF-8'
      },
      config: {
        url: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
        method: 'put',
        data: '{"intrinsic_fields":{"type_id":81},"attributes":{"preferred_labels":[],"elinaika":[{"birthdate":"1884","syntymapaikka":"London"}]},"related":{},"preferred_labels":[{"forename":"","surname":"Linley and Briggs","locale":"fi_FI"}]}',
        headers: {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json;charset=utf-8',
          'User-Agent': 'axios/0.21.1',
          'Content-Length': 228
        },
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        adapter: [Function: httpAdapter],
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        validateStatus: [Function: validateStatus]
      },
      request: ClientRequest {
        _events: [Object: null prototype] {
          socket: [Function],
          abort: [Function],
          aborted: [Function],
          connect: [Function],
          error: [Function],
          timeout: [Function],
          prefinish: [Function: requestOnPrefinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21068,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        connection: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21068,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _header: 'PUT /providence/service.php/item/ca_entities?pretty=1&authToken=undefined HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json;charset=utf-8\r\n' +
          'User-Agent: axios/0.21.1\r\n' +
          'Content-Length: 228\r\n' +
          'Host: localhost\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: noopPendingOutput],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: { path: null },
          requests: {},
          sockets: {
            'localhost:80:': [
              Socket {
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'localhost',
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: null,
                  pipesCount: 0,
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  emitClose: false,
                  autoDestroy: false,
                  destroyed: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                readable: true,
                _events: [Object: null prototype] {
                  end: [Function: onReadableStreamEnd],
                  free: [Function: onFree],
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  bufferedRequest: null,
                  lastBufferedRequest: null,
                  pendingcb: 1,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: false,
                  bufferedRequestCount: 0,
                  corkedRequestsFree: {
                    next: {
                      next: null,
                      entry: null,
                      finish: [Function: bound onCorkedFinish]
                    },
                    entry: null,
                    finish: [Function: bound onCorkedFinish]
                  }
                },
                writable: false,
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                parser: null,
                _httpMessage: [Circular],
                [Symbol(asyncId)]: 21068,
                [Symbol(kHandle)]: TCP {
                  reading: true,
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular]
                },
                [Symbol(kSetNoDelay)]: false,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          scheduling: 'fifo',
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'PUT',
        insecureHTTPParser: undefined,
        path: '/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: false,
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            data: [Function: handleStreamData],
            error: [Function: handleStreamError]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          socket: Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            readable: true,
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: {
                next: {
                  next: null,
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                },
                entry: null,
                finish: [Function: bound onCorkedFinish]
              }
            },
            writable: false,
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular],
            [Symbol(asyncId)]: 21068,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular]
            },
            [Symbol(kSetNoDelay)]: false,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          },
          connection: Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            readable: true,
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: {
                next: {
                  next: null,
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                },
                entry: null,
                finish: [Function: bound onCorkedFinish]
              }
            },
            writable: false,
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular],
            [Symbol(asyncId)]: 21068,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular]
            },
            [Symbol(kSetNoDelay)]: false,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            date: 'Tue, 23 Mar 2021 12:30:29 GMT',
            server: 'Apache/2.4.29 (Ubuntu)',
            'set-cookie': [
              'collectiveaccess=33981475-ba59-4274-a861-24bd3e234a5a; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence'
            ],
            'access-control-allow-origin': '*',
            'cache-control': 'no-cache, must-revalidate',
            expires: 'Mon, 26 Jul 1997 05:00:00 GMT',
            'www-authenticate': 'Basic realm="CollectiveAccess Service API"',
            'content-length': '0',
            connection: 'close',
            'content-type': 'text/html; charset=UTF-8'
          },
          rawHeaders: [
            'Date',
            'Tue, 23 Mar 2021 12:30:29 GMT',
            'Server',
            'Apache/2.4.29 (Ubuntu)',
            'Set-Cookie',
            'collectiveaccess=33981475-ba59-4274-a861-24bd3e234a5a; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence',
            'Access-Control-Allow-Origin',
            '*',
            'Cache-Control',
            'no-cache, must-revalidate',
            'Expires',
            'Mon, 26 Jul 1997 05:00:00 GMT',
            'WWW-Authenticate',
            'Basic realm="CollectiveAccess Service API"',
            'Content-Length',
            '0',
            'Connection',
            'close',
            'Content-Type',
            'text/html; charset=UTF-8'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 401,
          statusMessage: 'Access denied',
          client: Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            readable: true,
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: {
                next: {
                  next: null,
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                },
                entry: null,
                finish: [Function: bound onCorkedFinish]
              }
            },
            writable: false,
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular],
            [Symbol(asyncId)]: 21068,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular]
            },
            [Symbol(kSetNoDelay)]: false,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          },
          _consuming: false,
          _dumped: false,
          req: [Circular],
          responseUrl: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
          redirects: [],
          [Symbol(kCapture)]: false
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 0,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: true,
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'http:',
            path: '/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
            method: 'PUT',
            headers: {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json;charset=utf-8',
              'User-Agent': 'axios/0.21.1',
              'Content-Length': 228
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'localhost',
            port: null,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',        'BIND',        'CHECKOUT',
                  'CONNECT',    'COPY',        'DELETE',
                  'GET',        'HEAD',        'LINK',
                  'LOCK',       'M-SEARCH',    'MERGE',
                  'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
                  'MOVE',       'NOTIFY',      'OPTIONS',
                  'PATCH',      'POST',        'PRI',
                  'PROPFIND',   'PROPPATCH',   'PURGE',
                  'PUT',        'REBIND',      'REPORT',
                  'SEARCH',     'SOURCE',      'SUBSCRIBE',
                  'TRACE',      'UNBIND',      'UNLINK',
                  'UNLOCK',     'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Unordered Collection',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: { path: null },
                  requests: {},
                  sockets: {},
                  freeSockets: {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  scheduling: 'fifo',
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/providence/service.php/item/ca_entities',
            search: '?pretty=1&authToken=undefined'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 228,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function],
          _currentRequest: [Circular],
          _currentUrl: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json;charset=utf-8' ],
          'user-agent': [ 'User-Agent', 'axios/0.21.1' ],
          'content-length': [ 'Content-Length', 228 ],
          host: [ 'Host', 'localhost' ]
        }
      },
      data: ''
    },
    isAxiosError: true,
    toJSON: [Function: toJSON]
  },
  level: 'error',
  timestamp: '2021-03-23T12:30:29.435Z'
}
{
  user: 'test@user.com',
  message: 'Request failed with status code 401',
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971 invalid', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: Error: Request failed with status code 401
      at createError (/home/arihayri/Projects/oscari-API/node_modules/axios/lib/core/createError.js:16:15)
      at settle (/home/arihayri/Projects/oscari-API/node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (/home/arihayri/Projects/oscari-API/node_modules/axios/lib/adapters/http.js:260:11)
      at IncomingMessage.emit (events.js:326:22)
      at endReadableNT (_stream_readable.js:1241:12)
      at processTicksAndRejections (internal/process/task_queues.js:84:21) {
    config: {
      url: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
      method: 'put',
      data: '{"intrinsic_fields":{"type_id":80},"attributes":{"preferred_labels":[],"elinaika":[{"birthdate":"1971 invalid","syntymapaikka":"Juva"}]},"related":{},"preferred_labels":[{"forename":"First","surname":"Person","locale":"fi_FI"}]}',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json;charset=utf-8',
        'User-Agent': 'axios/0.21.1',
        'Content-Length': 228
      },
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      adapter: [Function: httpAdapter],
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: [Function: validateStatus]
    },
    request: ClientRequest {
      _events: [Object: null prototype] {
        socket: [Function],
        abort: [Function],
        aborted: [Function],
        connect: [Function],
        error: [Function],
        timeout: [Function],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        readable: true,
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: {
            next: {
              next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish]
            },
            entry: null,
            finish: [Function: bound onCorkedFinish]
          }
        },
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 21109,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      connection: Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        readable: true,
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: {
            next: {
              next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish]
            },
            entry: null,
            finish: [Function: bound onCorkedFinish]
          }
        },
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 21109,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _header: 'PUT /providence/service.php/item/ca_entities?pretty=1&authToken=undefined HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json;charset=utf-8\r\n' +
        'User-Agent: axios/0.21.1\r\n' +
        'Content-Length: 228\r\n' +
        'Host: localhost\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: noopPendingOutput],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: { path: null },
        requests: {},
        sockets: {
          'localhost:80:': [
            Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'localhost',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: null,
                pipesCount: 0,
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                emitClose: false,
                autoDestroy: false,
                destroyed: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              readable: true,
              _events: [Object: null prototype] {
                end: [Function: onReadableStreamEnd],
                free: [Function: onFree],
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                bufferedRequest: null,
                lastBufferedRequest: null,
                pendingcb: 1,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: false,
                bufferedRequestCount: 0,
                corkedRequestsFree: {
                  next: {
                    next: null,
                    entry: null,
                    finish: [Function: bound onCorkedFinish]
                  },
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                }
              },
              writable: false,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: null,
              _httpMessage: [Circular],
              [Symbol(asyncId)]: 21109,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular]
              },
              [Symbol(kSetNoDelay)]: false,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        scheduling: 'fifo',
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'PUT',
      insecureHTTPParser: undefined,
      path: '/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: true,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        readable: false,
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          error: [Function: handleStreamError]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        socket: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21109,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        connection: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21109,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: {
          date: 'Tue, 23 Mar 2021 12:30:29 GMT',
          server: 'Apache/2.4.29 (Ubuntu)',
          'set-cookie': [
            'collectiveaccess=f39e1c95-ec06-4569-aa1e-5c0b3bc963d2; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence'
          ],
          'access-control-allow-origin': '*',
          'cache-control': 'no-cache, must-revalidate',
          expires: 'Mon, 26 Jul 1997 05:00:00 GMT',
          'www-authenticate': 'Basic realm="CollectiveAccess Service API"',
          'content-length': '0',
          connection: 'close',
          'content-type': 'text/html; charset=UTF-8'
        },
        rawHeaders: [
          'Date',
          'Tue, 23 Mar 2021 12:30:29 GMT',
          'Server',
          'Apache/2.4.29 (Ubuntu)',
          'Set-Cookie',
          'collectiveaccess=f39e1c95-ec06-4569-aa1e-5c0b3bc963d2; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence',
          'Access-Control-Allow-Origin',
          '*',
          'Cache-Control',
          'no-cache, must-revalidate',
          'Expires',
          'Mon, 26 Jul 1997 05:00:00 GMT',
          'WWW-Authenticate',
          'Basic realm="CollectiveAccess Service API"',
          'Content-Length',
          '0',
          'Connection',
          'close',
          'Content-Type',
          'text/html; charset=UTF-8'
        ],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 401,
        statusMessage: 'Access denied',
        client: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21109,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _consuming: false,
        _dumped: false,
        req: [Circular],
        responseUrl: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
        redirects: [],
        [Symbol(kCapture)]: false
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 0,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: {
            next: null,
            entry: null,
            finish: [Function: bound onCorkedFinish]
          }
        },
        writable: true,
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'http:',
          path: '/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
          method: 'PUT',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json;charset=utf-8',
            'User-Agent': 'axios/0.21.1',
            'Content-Length': 228
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'localhost',
          port: null,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',        'BIND',        'CHECKOUT',
                'CONNECT',    'COPY',        'DELETE',
                'GET',        'HEAD',        'LINK',
                'LOCK',       'M-SEARCH',    'MERGE',
                'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
                'MOVE',       'NOTIFY',      'OPTIONS',
                'PATCH',      'POST',        'PRI',
                'PROPFIND',   'PROPPATCH',   'PURGE',
                'PUT',        'REBIND',      'REPORT',
                'SEARCH',     'SOURCE',      'SUBSCRIBE',
                'TRACE',      'UNBIND',      'UNLINK',
                'UNLOCK',     'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Unordered Collection',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: { path: null },
                requests: {},
                sockets: {},
                freeSockets: {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                scheduling: 'fifo',
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/providence/service.php/item/ca_entities',
          search: '?pretty=1&authToken=undefined'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 228,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function],
        _currentRequest: [Circular],
        _currentUrl: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json;charset=utf-8' ],
        'user-agent': [ 'User-Agent', 'axios/0.21.1' ],
        'content-length': [ 'Content-Length', 228 ],
        host: [ 'Host', 'localhost' ]
      }
    },
    response: {
      status: 401,
      statusText: 'Access denied',
      headers: {
        date: 'Tue, 23 Mar 2021 12:30:29 GMT',
        server: 'Apache/2.4.29 (Ubuntu)',
        'set-cookie': [
          'collectiveaccess=f39e1c95-ec06-4569-aa1e-5c0b3bc963d2; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence'
        ],
        'access-control-allow-origin': '*',
        'cache-control': 'no-cache, must-revalidate',
        expires: 'Mon, 26 Jul 1997 05:00:00 GMT',
        'www-authenticate': 'Basic realm="CollectiveAccess Service API"',
        'content-length': '0',
        connection: 'close',
        'content-type': 'text/html; charset=UTF-8'
      },
      config: {
        url: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
        method: 'put',
        data: '{"intrinsic_fields":{"type_id":80},"attributes":{"preferred_labels":[],"elinaika":[{"birthdate":"1971 invalid","syntymapaikka":"Juva"}]},"related":{},"preferred_labels":[{"forename":"First","surname":"Person","locale":"fi_FI"}]}',
        headers: {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json;charset=utf-8',
          'User-Agent': 'axios/0.21.1',
          'Content-Length': 228
        },
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        adapter: [Function: httpAdapter],
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        validateStatus: [Function: validateStatus]
      },
      request: ClientRequest {
        _events: [Object: null prototype] {
          socket: [Function],
          abort: [Function],
          aborted: [Function],
          connect: [Function],
          error: [Function],
          timeout: [Function],
          prefinish: [Function: requestOnPrefinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21109,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        connection: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21109,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _header: 'PUT /providence/service.php/item/ca_entities?pretty=1&authToken=undefined HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json;charset=utf-8\r\n' +
          'User-Agent: axios/0.21.1\r\n' +
          'Content-Length: 228\r\n' +
          'Host: localhost\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: noopPendingOutput],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: { path: null },
          requests: {},
          sockets: {
            'localhost:80:': [
              Socket {
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'localhost',
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: null,
                  pipesCount: 0,
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  emitClose: false,
                  autoDestroy: false,
                  destroyed: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                readable: true,
                _events: [Object: null prototype] {
                  end: [Function: onReadableStreamEnd],
                  free: [Function: onFree],
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  bufferedRequest: null,
                  lastBufferedRequest: null,
                  pendingcb: 1,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: false,
                  bufferedRequestCount: 0,
                  corkedRequestsFree: {
                    next: {
                      next: null,
                      entry: null,
                      finish: [Function: bound onCorkedFinish]
                    },
                    entry: null,
                    finish: [Function: bound onCorkedFinish]
                  }
                },
                writable: false,
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                parser: null,
                _httpMessage: [Circular],
                [Symbol(asyncId)]: 21109,
                [Symbol(kHandle)]: TCP {
                  reading: true,
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular]
                },
                [Symbol(kSetNoDelay)]: false,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          scheduling: 'fifo',
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'PUT',
        insecureHTTPParser: undefined,
        path: '/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: false,
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            data: [Function: handleStreamData],
            error: [Function: handleStreamError]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          socket: Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            readable: true,
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: {
                next: {
                  next: null,
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                },
                entry: null,
                finish: [Function: bound onCorkedFinish]
              }
            },
            writable: false,
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular],
            [Symbol(asyncId)]: 21109,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular]
            },
            [Symbol(kSetNoDelay)]: false,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          },
          connection: Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            readable: true,
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: {
                next: {
                  next: null,
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                },
                entry: null,
                finish: [Function: bound onCorkedFinish]
              }
            },
            writable: false,
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular],
            [Symbol(asyncId)]: 21109,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular]
            },
            [Symbol(kSetNoDelay)]: false,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            date: 'Tue, 23 Mar 2021 12:30:29 GMT',
            server: 'Apache/2.4.29 (Ubuntu)',
            'set-cookie': [
              'collectiveaccess=f39e1c95-ec06-4569-aa1e-5c0b3bc963d2; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence'
            ],
            'access-control-allow-origin': '*',
            'cache-control': 'no-cache, must-revalidate',
            expires: 'Mon, 26 Jul 1997 05:00:00 GMT',
            'www-authenticate': 'Basic realm="CollectiveAccess Service API"',
            'content-length': '0',
            connection: 'close',
            'content-type': 'text/html; charset=UTF-8'
          },
          rawHeaders: [
            'Date',
            'Tue, 23 Mar 2021 12:30:29 GMT',
            'Server',
            'Apache/2.4.29 (Ubuntu)',
            'Set-Cookie',
            'collectiveaccess=f39e1c95-ec06-4569-aa1e-5c0b3bc963d2; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence',
            'Access-Control-Allow-Origin',
            '*',
            'Cache-Control',
            'no-cache, must-revalidate',
            'Expires',
            'Mon, 26 Jul 1997 05:00:00 GMT',
            'WWW-Authenticate',
            'Basic realm="CollectiveAccess Service API"',
            'Content-Length',
            '0',
            'Connection',
            'close',
            'Content-Type',
            'text/html; charset=UTF-8'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 401,
          statusMessage: 'Access denied',
          client: Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            readable: true,
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: {
                next: {
                  next: null,
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                },
                entry: null,
                finish: [Function: bound onCorkedFinish]
              }
            },
            writable: false,
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular],
            [Symbol(asyncId)]: 21109,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular]
            },
            [Symbol(kSetNoDelay)]: false,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          },
          _consuming: false,
          _dumped: false,
          req: [Circular],
          responseUrl: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
          redirects: [],
          [Symbol(kCapture)]: false
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 0,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: true,
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'http:',
            path: '/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
            method: 'PUT',
            headers: {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json;charset=utf-8',
              'User-Agent': 'axios/0.21.1',
              'Content-Length': 228
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'localhost',
            port: null,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',        'BIND',        'CHECKOUT',
                  'CONNECT',    'COPY',        'DELETE',
                  'GET',        'HEAD',        'LINK',
                  'LOCK',       'M-SEARCH',    'MERGE',
                  'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
                  'MOVE',       'NOTIFY',      'OPTIONS',
                  'PATCH',      'POST',        'PRI',
                  'PROPFIND',   'PROPPATCH',   'PURGE',
                  'PUT',        'REBIND',      'REPORT',
                  'SEARCH',     'SOURCE',      'SUBSCRIBE',
                  'TRACE',      'UNBIND',      'UNLINK',
                  'UNLOCK',     'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Unordered Collection',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: { path: null },
                  requests: {},
                  sockets: {},
                  freeSockets: {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  scheduling: 'fifo',
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/providence/service.php/item/ca_entities',
            search: '?pretty=1&authToken=undefined'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 228,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function],
          _currentRequest: [Circular],
          _currentUrl: 'http://localhost/providence/service.php/item/ca_entities?pretty=1&authToken=undefined',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json;charset=utf-8' ],
          'user-agent': [ 'User-Agent', 'axios/0.21.1' ],
          'content-length': [ 'Content-Length', 228 ],
          host: [ 'Host', 'localhost' ]
        }
      },
      data: ''
    },
    isAxiosError: true,
    toJSON: [Function: toJSON]
  },
  level: 'error',
  timestamp: '2021-03-23T12:30:29.497Z'
}
{
  user: 'test@user.com',
  message: 'List item creation failed. Error: Request failed with status code 401',
  params: { id: '50' },
  path: '/api/ca/lists/50/items',
  body: {
    intrinsic_fields: { list_id: '50', is_enabled: 1, idno: 'bicycle' },
    preferred_labels: [
      {
        locale: 'fi_FI',
        name_singular: 'bicycle',
        name_plural: 'bicycle',
        description: ''
      }
    ]
  },
  error: 'List item creation failed. Error: Request failed with status code 401',
  level: 'error',
  timestamp: '2021-03-23T12:30:29.569Z'
}
{
  user: 'test@user.com',
  message: 'Request failed with status code 401',
  params: {},
  path: '/api/ca/objects',
  body: {
    attributes: {
      yleisnimi: [ { yleisnimi: 'bicycle' } ],
      description: [
        {
          description: 'An 1885 Whippet safety bicycle\n' +
            'By Science museum, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=7708717'
        }
      ],
      pvm_cont: [ { pvm: '1885-1888' } ]
    },
    relations: {
      ca_entities: [
        { id: '2', display_label: 'Linley and Briggs', type_id: '182' }
      ]
    },
    preferred_labels: [ { name: 'Whippet', locale: 'fi_FI' } ],
    lot_id: 1,
    type_id: 23,
    idno: '1:1'
  },
  error: Error: Request failed with status code 401
      at createError (/home/arihayri/Projects/oscari-API/node_modules/axios/lib/core/createError.js:16:15)
      at settle (/home/arihayri/Projects/oscari-API/node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (/home/arihayri/Projects/oscari-API/node_modules/axios/lib/adapters/http.js:260:11)
      at IncomingMessage.emit (events.js:326:22)
      at endReadableNT (_stream_readable.js:1241:12)
      at processTicksAndRejections (internal/process/task_queues.js:84:21) {
    config: {
      url: 'http://localhost/providence/service.php/item/ca_objects?pretty=1&authToken=undefined',
      method: 'put',
      data: '{"intrinsic_fields":{"type_id":23,"lot_id":1,"idno":"1:1"},"attributes":{"yleisnimi":[{"yleisnimi":"bicycle"}],"description":[{"description":"An 1885 Whippet safety bicycle\\nBy Science museum, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=7708717"}],"pvm_cont":[{"pvm":"1885-1888"}]},"related":{"ca_entities":[{"type_id":"182","direction":"ltor"}]},"preferred_labels":[{"name":"Whippet","locale":"fi_FI"}]}',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json;charset=utf-8',
        'User-Agent': 'axios/0.21.1',
        'Content-Length': 422
      },
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      adapter: [Function: httpAdapter],
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: [Function: validateStatus]
    },
    request: ClientRequest {
      _events: [Object: null prototype] {
        socket: [Function],
        abort: [Function],
        aborted: [Function],
        connect: [Function],
        error: [Function],
        timeout: [Function],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        readable: true,
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: {
            next: {
              next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish]
            },
            entry: null,
            finish: [Function: bound onCorkedFinish]
          }
        },
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 21190,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      connection: Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: false,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        readable: true,
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 1,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: {
            next: {
              next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish]
            },
            entry: null,
            finish: [Function: bound onCorkedFinish]
          }
        },
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 21190,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _header: 'PUT /providence/service.php/item/ca_objects?pretty=1&authToken=undefined HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json;charset=utf-8\r\n' +
        'User-Agent: axios/0.21.1\r\n' +
        'Content-Length: 422\r\n' +
        'Host: localhost\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: noopPendingOutput],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: { path: null },
        requests: {},
        sockets: {
          'localhost:80:': [
            Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'localhost',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: null,
                pipesCount: 0,
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                emitClose: false,
                autoDestroy: false,
                destroyed: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              readable: true,
              _events: [Object: null prototype] {
                end: [Function: onReadableStreamEnd],
                free: [Function: onFree],
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                bufferedRequest: null,
                lastBufferedRequest: null,
                pendingcb: 1,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: false,
                bufferedRequestCount: 0,
                corkedRequestsFree: {
                  next: {
                    next: null,
                    entry: null,
                    finish: [Function: bound onCorkedFinish]
                  },
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                }
              },
              writable: false,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: null,
              _httpMessage: [Circular],
              [Symbol(asyncId)]: 21190,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular]
              },
              [Symbol(kSetNoDelay)]: false,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        scheduling: 'fifo',
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'PUT',
      insecureHTTPParser: undefined,
      path: '/providence/service.php/item/ca_objects?pretty=1&authToken=undefined',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: true,
          autoDestroy: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        readable: false,
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          error: [Function: handleStreamError]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        socket: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21190,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        connection: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21190,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: {
          date: 'Tue, 23 Mar 2021 12:30:29 GMT',
          server: 'Apache/2.4.29 (Ubuntu)',
          'set-cookie': [
            'collectiveaccess=fe382463-3ea0-46e1-8bac-3afe8f410f9c; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence'
          ],
          'access-control-allow-origin': '*',
          'cache-control': 'no-cache, must-revalidate',
          expires: 'Mon, 26 Jul 1997 05:00:00 GMT',
          'www-authenticate': 'Basic realm="CollectiveAccess Service API"',
          'content-length': '0',
          connection: 'close',
          'content-type': 'text/html; charset=UTF-8'
        },
        rawHeaders: [
          'Date',
          'Tue, 23 Mar 2021 12:30:29 GMT',
          'Server',
          'Apache/2.4.29 (Ubuntu)',
          'Set-Cookie',
          'collectiveaccess=fe382463-3ea0-46e1-8bac-3afe8f410f9c; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence',
          'Access-Control-Allow-Origin',
          '*',
          'Cache-Control',
          'no-cache, must-revalidate',
          'Expires',
          'Mon, 26 Jul 1997 05:00:00 GMT',
          'WWW-Authenticate',
          'Basic realm="CollectiveAccess Service API"',
          'Content-Length',
          '0',
          'Connection',
          'close',
          'Content-Type',
          'text/html; charset=UTF-8'
        ],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 401,
        statusMessage: 'Access denied',
        client: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21190,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _consuming: false,
        _dumped: false,
        req: [Circular],
        responseUrl: 'http://localhost/providence/service.php/item/ca_objects?pretty=1&authToken=undefined',
        redirects: [],
        [Symbol(kCapture)]: false
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 0,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: {
            next: null,
            entry: null,
            finish: [Function: bound onCorkedFinish]
          }
        },
        writable: true,
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'http:',
          path: '/providence/service.php/item/ca_objects?pretty=1&authToken=undefined',
          method: 'PUT',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json;charset=utf-8',
            'User-Agent': 'axios/0.21.1',
            'Content-Length': 422
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'localhost',
          port: null,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',        'BIND',        'CHECKOUT',
                'CONNECT',    'COPY',        'DELETE',
                'GET',        'HEAD',        'LINK',
                'LOCK',       'M-SEARCH',    'MERGE',
                'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
                'MOVE',       'NOTIFY',      'OPTIONS',
                'PATCH',      'POST',        'PRI',
                'PROPFIND',   'PROPPATCH',   'PURGE',
                'PUT',        'REBIND',      'REPORT',
                'SEARCH',     'SOURCE',      'SUBSCRIBE',
                'TRACE',      'UNBIND',      'UNLINK',
                'UNLOCK',     'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Unordered Collection',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: { path: null },
                requests: {},
                sockets: {},
                freeSockets: {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                scheduling: 'fifo',
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/providence/service.php/item/ca_objects',
          search: '?pretty=1&authToken=undefined'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 422,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function],
        _currentRequest: [Circular],
        _currentUrl: 'http://localhost/providence/service.php/item/ca_objects?pretty=1&authToken=undefined',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json;charset=utf-8' ],
        'user-agent': [ 'User-Agent', 'axios/0.21.1' ],
        'content-length': [ 'Content-Length', 422 ],
        host: [ 'Host', 'localhost' ]
      }
    },
    response: {
      status: 401,
      statusText: 'Access denied',
      headers: {
        date: 'Tue, 23 Mar 2021 12:30:29 GMT',
        server: 'Apache/2.4.29 (Ubuntu)',
        'set-cookie': [
          'collectiveaccess=fe382463-3ea0-46e1-8bac-3afe8f410f9c; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence'
        ],
        'access-control-allow-origin': '*',
        'cache-control': 'no-cache, must-revalidate',
        expires: 'Mon, 26 Jul 1997 05:00:00 GMT',
        'www-authenticate': 'Basic realm="CollectiveAccess Service API"',
        'content-length': '0',
        connection: 'close',
        'content-type': 'text/html; charset=UTF-8'
      },
      config: {
        url: 'http://localhost/providence/service.php/item/ca_objects?pretty=1&authToken=undefined',
        method: 'put',
        data: '{"intrinsic_fields":{"type_id":23,"lot_id":1,"idno":"1:1"},"attributes":{"yleisnimi":[{"yleisnimi":"bicycle"}],"description":[{"description":"An 1885 Whippet safety bicycle\\nBy Science museum, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=7708717"}],"pvm_cont":[{"pvm":"1885-1888"}]},"related":{"ca_entities":[{"type_id":"182","direction":"ltor"}]},"preferred_labels":[{"name":"Whippet","locale":"fi_FI"}]}',
        headers: {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json;charset=utf-8',
          'User-Agent': 'axios/0.21.1',
          'Content-Length': 422
        },
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        adapter: [Function: httpAdapter],
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        validateStatus: [Function: validateStatus]
      },
      request: ClientRequest {
        _events: [Object: null prototype] {
          socket: [Function],
          abort: [Function],
          aborted: [Function],
          connect: [Function],
          error: [Function],
          timeout: [Function],
          prefinish: [Function: requestOnPrefinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21190,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        connection: Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: false,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: true,
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 1,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: {
                next: null,
                entry: null,
                finish: [Function: bound onCorkedFinish]
              },
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: false,
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular],
          [Symbol(asyncId)]: 21190,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular]
          },
          [Symbol(kSetNoDelay)]: false,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _header: 'PUT /providence/service.php/item/ca_objects?pretty=1&authToken=undefined HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json;charset=utf-8\r\n' +
          'User-Agent: axios/0.21.1\r\n' +
          'Content-Length: 422\r\n' +
          'Host: localhost\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: noopPendingOutput],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: { path: null },
          requests: {},
          sockets: {
            'localhost:80:': [
              Socket {
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'localhost',
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: null,
                  pipesCount: 0,
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  emitClose: false,
                  autoDestroy: false,
                  destroyed: false,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                readable: true,
                _events: [Object: null prototype] {
                  end: [Function: onReadableStreamEnd],
                  free: [Function: onFree],
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  bufferedRequest: null,
                  lastBufferedRequest: null,
                  pendingcb: 1,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: false,
                  bufferedRequestCount: 0,
                  corkedRequestsFree: {
                    next: {
                      next: null,
                      entry: null,
                      finish: [Function: bound onCorkedFinish]
                    },
                    entry: null,
                    finish: [Function: bound onCorkedFinish]
                  }
                },
                writable: false,
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: null,
                _server: null,
                parser: null,
                _httpMessage: [Circular],
                [Symbol(asyncId)]: 21190,
                [Symbol(kHandle)]: TCP {
                  reading: true,
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular]
                },
                [Symbol(kSetNoDelay)]: false,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          scheduling: 'fifo',
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'PUT',
        insecureHTTPParser: undefined,
        path: '/providence/service.php/item/ca_objects?pretty=1&authToken=undefined',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            emitClose: true,
            autoDestroy: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          readable: false,
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            data: [Function: handleStreamData],
            error: [Function: handleStreamError]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          socket: Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            readable: true,
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: {
                next: {
                  next: null,
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                },
                entry: null,
                finish: [Function: bound onCorkedFinish]
              }
            },
            writable: false,
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular],
            [Symbol(asyncId)]: 21190,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular]
            },
            [Symbol(kSetNoDelay)]: false,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          },
          connection: Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            readable: true,
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: {
                next: {
                  next: null,
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                },
                entry: null,
                finish: [Function: bound onCorkedFinish]
              }
            },
            writable: false,
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular],
            [Symbol(asyncId)]: 21190,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular]
            },
            [Symbol(kSetNoDelay)]: false,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: {
            date: 'Tue, 23 Mar 2021 12:30:29 GMT',
            server: 'Apache/2.4.29 (Ubuntu)',
            'set-cookie': [
              'collectiveaccess=fe382463-3ea0-46e1-8bac-3afe8f410f9c; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence'
            ],
            'access-control-allow-origin': '*',
            'cache-control': 'no-cache, must-revalidate',
            expires: 'Mon, 26 Jul 1997 05:00:00 GMT',
            'www-authenticate': 'Basic realm="CollectiveAccess Service API"',
            'content-length': '0',
            connection: 'close',
            'content-type': 'text/html; charset=UTF-8'
          },
          rawHeaders: [
            'Date',
            'Tue, 23 Mar 2021 12:30:29 GMT',
            'Server',
            'Apache/2.4.29 (Ubuntu)',
            'Set-Cookie',
            'collectiveaccess=fe382463-3ea0-46e1-8bac-3afe8f410f9c; expires=Tue, 27-Mar-2040 23:10:29 GMT; Max-Age=600000000; path=/providence',
            'Access-Control-Allow-Origin',
            '*',
            'Cache-Control',
            'no-cache, must-revalidate',
            'Expires',
            'Mon, 26 Jul 1997 05:00:00 GMT',
            'WWW-Authenticate',
            'Basic realm="CollectiveAccess Service API"',
            'Content-Length',
            '0',
            'Connection',
            'close',
            'Content-Type',
            'text/html; charset=UTF-8'
          ],
          trailers: {},
          rawTrailers: [],
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 401,
          statusMessage: 'Access denied',
          client: Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            readable: true,
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 1,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: {
                next: {
                  next: null,
                  entry: null,
                  finish: [Function: bound onCorkedFinish]
                },
                entry: null,
                finish: [Function: bound onCorkedFinish]
              }
            },
            writable: false,
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular],
            [Symbol(asyncId)]: 21190,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular]
            },
            [Symbol(kSetNoDelay)]: false,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          },
          _consuming: false,
          _dumped: false,
          req: [Circular],
          responseUrl: 'http://localhost/providence/service.php/item/ca_objects?pretty=1&authToken=undefined',
          redirects: [],
          [Symbol(kCapture)]: false
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 0,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: {
              next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish]
            }
          },
          writable: true,
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'http:',
            path: '/providence/service.php/item/ca_objects?pretty=1&authToken=undefined',
            method: 'PUT',
            headers: {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json;charset=utf-8',
              'User-Agent': 'axios/0.21.1',
              'Content-Length': 422
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'localhost',
            port: null,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',        'BIND',        'CHECKOUT',
                  'CONNECT',    'COPY',        'DELETE',
                  'GET',        'HEAD',        'LINK',
                  'LOCK',       'M-SEARCH',    'MERGE',
                  'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
                  'MOVE',       'NOTIFY',      'OPTIONS',
                  'PATCH',      'POST',        'PRI',
                  'PROPFIND',   'PROPPATCH',   'PURGE',
                  'PUT',        'REBIND',      'REPORT',
                  'SEARCH',     'SOURCE',      'SUBSCRIBE',
                  'TRACE',      'UNBIND',      'UNLINK',
                  'UNLOCK',     'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Unordered Collection',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: { path: null },
                  requests: {},
                  sockets: {},
                  freeSockets: {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  scheduling: 'fifo',
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/providence/service.php/item/ca_objects',
            search: '?pretty=1&authToken=undefined'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 422,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function],
          _currentRequest: [Circular],
          _currentUrl: 'http://localhost/providence/service.php/item/ca_objects?pretty=1&authToken=undefined',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json;charset=utf-8' ],
          'user-agent': [ 'User-Agent', 'axios/0.21.1' ],
          'content-length': [ 'Content-Length', 422 ],
          host: [ 'Host', 'localhost' ]
        }
      },
      data: ''
    },
    isAxiosError: true,
    toJSON: [Function: toJSON]
  },
  level: 'error',
  timestamp: '2021-03-23T12:30:29.654Z'
}
{
  user: 'test@user.com',
  message: 'User not found',
  params: {},
  path: '/api/ca/login',
  body: {},
  error: { message: 'User not found', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T13:20:49.869Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T13:20:49.892Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T13:20:49.940Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T13:20:49.971Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T13:20:50.004Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1884', syntymapaikka: 'London' } ]
    },
    relations: {},
    preferred_labels: [ { forename: '', surname: 'Linley and Briggs', locale: 'fi_FI' } ],
    type_id: 81
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T13:20:50.022Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971 invalid', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T13:20:50.044Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/lists/50/items',
  body: {
    intrinsic_fields: { list_id: '50', is_enabled: 1, idno: 'bicycle' },
    preferred_labels: [
      {
        locale: 'fi_FI',
        name_singular: 'bicycle',
        name_plural: 'bicycle',
        description: ''
      }
    ]
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T13:20:50.061Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/objects',
  body: {
    attributes: {
      yleisnimi: [ { yleisnimi: 'bicycle' } ],
      description: [
        {
          description: 'An 1885 Whippet safety bicycle\n' +
            'By Science museum, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=7708717'
        }
      ],
      pvm_cont: [ { pvm: '1885-1888' } ]
    },
    relations: {
      ca_entities: [
        { id: '2', display_label: 'Linley and Briggs', type_id: '182' }
      ]
    },
    preferred_labels: [ { name: 'Whippet', locale: 'fi_FI' } ],
    lot_id: 1,
    type_id: 23,
    idno: '1:1'
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-23T13:20:50.085Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T13:21:29.391Z'
}
{
  user: 'test@user.com',
  message: [ 'syntynyt is invalid' ],
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971 invalid', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: [ 'syntynyt is invalid' ],
  level: 'error',
  timestamp: '2021-03-23T13:21:30.490Z'
}
{
  user: 'test@user.com',
  message: [ 'Invalid relationship reference for lot_id' ],
  params: {},
  path: '/api/ca/objects',
  body: {
    attributes: {
      yleisnimi: [ { yleisnimi: 'bicycle' } ],
      description: [
        {
          description: 'An 1885 Whippet safety bicycle\n' +
            'By Science museum, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=7708717'
        }
      ],
      pvm_cont: [ { pvm: '1885-1888' } ]
    },
    relations: {
      ca_entities: [
        { id: '2', display_label: 'Linley and Briggs', type_id: '182' }
      ]
    },
    preferred_labels: [ { name: 'Whippet', locale: 'fi_FI' } ],
    lot_id: 1,
    type_id: 23,
    idno: '1:1'
  },
  error: [ 'Invalid relationship reference for lot_id' ],
  level: 'error',
  timestamp: '2021-03-23T13:21:30.893Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T13:22:55.400Z'
}
{
  user: 'test@user.com',
  message: [ 'syntynyt is invalid' ],
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971 invalid', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: [ 'syntynyt is invalid' ],
  level: 'error',
  timestamp: '2021-03-23T13:22:56.311Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T13:23:37.954Z'
}
{
  user: 'test@user.com',
  message: [ 'syntynyt is invalid' ],
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971 invalid', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: [ 'syntynyt is invalid' ],
  level: 'error',
  timestamp: '2021-03-23T13:23:38.749Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-23T13:26:41.486Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-23T13:28:26.557Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-23T13:32:21.780Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T13:40:05.298Z'
}
{
  user: 'test@user.com',
  message: [ 'syntynyt is invalid' ],
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971 invalid', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: [ 'syntynyt is invalid' ],
  level: 'error',
  timestamp: '2021-03-23T13:40:06.247Z'
}
{
  user: 'test@user.com',
  message: 'Error in item creation',
  params: {},
  path: '/api/ca/objects',
  body: {
    attributes: {
      yleisnimi: [ { yleisnimi: 'bicycle' } ],
      description: [
        {
          description: 'An 1885 Whippet safety bicycle\n' +
            'By Science museum, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=7708717'
        }
      ],
      pvm_cont: [ { pvm: '1885-1888' } ]
    },
    relations: {
      ca_entities: [
        {
          id: { ok: true, entity_id: 2 },
          display_label: 'Linley and Briggs',
          type_id: '182'
        }
      ]
    },
    preferred_labels: [ { name: 'Whippet', locale: 'fi_FI' } ],
    lot_id: { ok: true, lot_id: 1 },
    type_id: 23,
    idno: '1:1'
  },
  error: 'Error in item creation',
  level: 'error',
  timestamp: '2021-03-23T13:40:07.464Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T13:41:29.638Z'
}
{
  user: 'test@user.com',
  message: [ 'syntynyt is invalid' ],
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971 invalid', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: [ 'syntynyt is invalid' ],
  level: 'error',
  timestamp: '2021-03-23T13:41:30.545Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T13:46:55.121Z'
}
{
  user: 'test@user.com',
  message: [ 'syntynyt is invalid' ],
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971 invalid', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: [ 'syntynyt is invalid' ],
  level: 'error',
  timestamp: '2021-03-23T13:46:56.033Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-23T13:48:50.238Z'
}
{
  user: 'test@user.com',
  message: [ 'syntynyt is invalid' ],
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971 invalid', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: [ 'syntynyt is invalid' ],
  level: 'error',
  timestamp: '2021-03-23T13:48:50.918Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T06:34:00.764Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T06:34:53.241Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T06:35:15.588Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T06:48:25.140Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T06:49:41.138Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T11:36:58.104Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T11:37:32.808Z'
}
{
  user: 'test@user.com',
  message: 'IDNO not found!',
  params: { lot_id: '1' },
  path: '/api/ca/idno/lots/1/check',
  body: {},
  error: { message: 'IDNO not found!', status: 404 },
  level: 'error',
  timestamp: '2021-03-24T11:38:50.487Z'
}
{
  user: 'test@user.com',
  message: "ENOENT: no such file or directory, mkdir '/files/1'",
  params: { id: '1' },
  path: '/api/ca/objects/1/upload',
  body: {},
  error: Error: ENOENT: no such file or directory, mkdir '/files/1'
      at Object.mkdirSync (fs.js:921:3)
      at Media.uploadFile (/home/arihayri/Projects/oscari-API/app/Media.js:130:7)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)
      at async /home/arihayri/Projects/oscari-API/app/index.js:852:15
      at async /home/arihayri/Projects/oscari-API/app/index.js:154:4
      at async /home/arihayri/Projects/oscari-API/app/index.js:126:2
      at async handleError (/home/arihayri/Projects/oscari-API/app/index.js:101:3)
      at async cors (/home/arihayri/Projects/oscari-API/node_modules/@koa/cors/index.js:98:16)
      at async session (/home/arihayri/Projects/oscari-API/node_modules/koa-session/index.js:41:7) {
    errno: -2,
    syscall: 'mkdir',
    code: 'ENOENT',
    path: '/files/1'
  },
  level: 'error',
  timestamp: '2021-03-24T12:18:30.446Z'
}
{
  user: 'test@user.com',
  message: "ENOENT: no such file or directory, mkdir '/files/1'",
  params: { id: '1' },
  path: '/api/ca/objects/1/upload',
  body: {},
  error: Error: ENOENT: no such file or directory, mkdir '/files/1'
      at Object.mkdirSync (fs.js:921:3)
      at Media.uploadFile (/home/arihayri/Projects/oscari-API/app/Media.js:130:7)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)
      at async /home/arihayri/Projects/oscari-API/app/index.js:852:15
      at async /home/arihayri/Projects/oscari-API/app/index.js:154:4
      at async /home/arihayri/Projects/oscari-API/app/index.js:126:2
      at async handleError (/home/arihayri/Projects/oscari-API/app/index.js:101:3)
      at async cors (/home/arihayri/Projects/oscari-API/node_modules/@koa/cors/index.js:98:16)
      at async session (/home/arihayri/Projects/oscari-API/node_modules/koa-session/index.js:41:7) {
    errno: -2,
    syscall: 'mkdir',
    code: 'ENOENT',
    path: '/files/1'
  },
  level: 'error',
  timestamp: '2021-03-24T12:19:34.799Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:20:45.369Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:20:45.398Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:20:45.420Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:20:45.445Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1884', syntymapaikka: 'London' } ]
    },
    relations: {},
    preferred_labels: [ { forename: '', surname: 'Linley and Briggs', locale: 'fi_FI' } ],
    type_id: 81
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:20:45.466Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971 invalid', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:20:45.485Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/lists/50/items',
  body: {
    intrinsic_fields: { list_id: '50', is_enabled: 1, idno: 'bicycle' },
    preferred_labels: [
      {
        locale: 'fi_FI',
        name_singular: 'bicycle',
        name_plural: 'bicycle',
        description: ''
      }
    ]
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:20:45.508Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/object_lots',
  body: {
    attributes: { lot_content: [ { lot_content: 'All kind of test material' } ] },
    relations: {
      ca_entities: [
        {
          entity_id: null,
          type_id: '225',
          relation_info: 'This is a test donater'
        }
      ]
    },
    status: 'saapunut',
    preferred_labels: [ { name: 'First donation', locale: 'fi_FI' } ],
    type_id: 57
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:20:45.528Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/objects',
  body: {
    attributes: {
      yleisnimi: [ { yleisnimi: 'bicycle' } ],
      description: [
        {
          description: 'An 1885 Whippet safety bicycle\n' +
            'By Science museum, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=7708717'
        }
      ],
      pvm_cont: [ { pvm: '1885-1888' } ]
    },
    relations: {
      ca_entities: [
        {
          entity_id: null,
          display_label: 'Linley and Briggs',
          type_id: '182'
        }
      ]
    },
    preferred_labels: [ { name: 'Whippet', locale: 'fi_FI' } ],
    lot_id: null,
    type_id: 23,
    idno: '1:1'
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:20:45.546Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:22:00.587Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:22:00.643Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/sets/test-set_5',
  body: {},
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:22:00.663Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:22:00.704Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1884', syntymapaikka: 'London' } ]
    },
    relations: {},
    preferred_labels: [ { forename: '', surname: 'Linley and Briggs', locale: 'fi_FI' } ],
    type_id: 81
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:22:00.724Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971 invalid', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:22:00.744Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/lists/50/items',
  body: {
    intrinsic_fields: { list_id: '50', is_enabled: 1, idno: 'bicycle' },
    preferred_labels: [
      {
        locale: 'fi_FI',
        name_singular: 'bicycle',
        name_plural: 'bicycle',
        description: ''
      }
    ]
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:22:00.764Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/object_lots',
  body: {
    attributes: { lot_content: [ { lot_content: 'All kind of test material' } ] },
    relations: {
      ca_entities: [
        {
          entity_id: null,
          type_id: '225',
          relation_info: 'This is a test donater'
        }
      ]
    },
    status: 'saapunut',
    preferred_labels: [ { name: 'First donation', locale: 'fi_FI' } ],
    type_id: 57
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:22:00.795Z'
}
{
  user: 'test@user.com',
  message: 'et ole kirjautunut',
  params: undefined,
  path: '/api/ca/objects',
  body: {
    attributes: {
      yleisnimi: [ { yleisnimi: 'bicycle' } ],
      description: [
        {
          description: 'An 1885 Whippet safety bicycle\n' +
            'By Science museum, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=7708717'
        }
      ],
      pvm_cont: [ { pvm: '1885-1888' } ]
    },
    relations: {
      ca_entities: [
        {
          entity_id: null,
          display_label: 'Linley and Briggs',
          type_id: '182'
        }
      ]
    },
    preferred_labels: [ { name: 'Whippet', locale: 'fi_FI' } ],
    lot_id: null,
    type_id: 23,
    idno: '1:1'
  },
  error: { message: 'et ole kirjautunut', status: 401 },
  level: 'error',
  timestamp: '2021-03-24T12:22:00.828Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T12:24:43.848Z'
}
{
  user: 'test@user.com',
  message: 'Set called test-set_5 exists',
  params: {},
  path: '/api/ca/sets',
  body: { name: 'test-set_5' },
  error: { message: 'Set called test-set_5 exists', status: 409 },
  level: 'error',
  timestamp: '2021-03-24T12:24:50.816Z'
}
{
  user: 'test@user.com',
  message: [ 'syntynyt is invalid' ],
  params: {},
  path: '/api/ca/entities',
  body: {
    attributes: {
      preferred_labels: [],
      elinaika: [ { birthdate: '1971 invalid', syntymapaikka: 'Juva' } ]
    },
    relations: {},
    preferred_labels: [ { forename: 'First', surname: 'Person', locale: 'fi_FI' } ],
    type_id: 80
  },
  error: [ 'syntynyt is invalid' ],
  level: 'error',
  timestamp: '2021-03-24T12:24:51.717Z'
}
{
  user: 'test@user.com',
  message: "ENOENT: no such file or directory, mkdir '/files/1'",
  params: { id: '1' },
  path: '/api/ca/objects/1/upload',
  body: {},
  error: Error: ENOENT: no such file or directory, mkdir '/files/1'
      at Object.mkdirSync (fs.js:921:3)
      at Media.uploadFile (/home/arihayri/Projects/oscari-API/app/Media.js:130:7)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)
      at async /home/arihayri/Projects/oscari-API/app/index.js:852:15
      at async /home/arihayri/Projects/oscari-API/app/index.js:154:4
      at async /home/arihayri/Projects/oscari-API/app/index.js:126:2
      at async handleError (/home/arihayri/Projects/oscari-API/app/index.js:101:3)
      at async cors (/home/arihayri/Projects/oscari-API/node_modules/@koa/cors/index.js:98:16)
      at async session (/home/arihayri/Projects/oscari-API/node_modules/koa-session/index.js:41:7) {
    errno: -2,
    syscall: 'mkdir',
    code: 'ENOENT',
    path: '/files/1'
  },
  level: 'error',
  timestamp: '2021-03-24T12:25:27.537Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T13:10:31.454Z'
}
{
  user: 'test@user.com',
  message: "ENOENT: no such file or directory, mkdir '/files/1'",
  params: { id: '1' },
  path: '/api/ca/objects/1/upload',
  body: {},
  error: Error: ENOENT: no such file or directory, mkdir '/files/1'
      at Object.mkdirSync (fs.js:921:3)
      at Media.uploadFile (/home/arihayri/Projects/oscari-API/app/Media.js:130:7)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)
      at async /home/arihayri/Projects/oscari-API/app/index.js:852:15
      at async /home/arihayri/Projects/oscari-API/app/index.js:154:4
      at async /home/arihayri/Projects/oscari-API/app/index.js:126:2
      at async handleError (/home/arihayri/Projects/oscari-API/app/index.js:101:3)
      at async cors (/home/arihayri/Projects/oscari-API/node_modules/@koa/cors/index.js:98:16)
      at async session (/home/arihayri/Projects/oscari-API/node_modules/koa-session/index.js:41:7) {
    errno: -2,
    syscall: 'mkdir',
    code: 'ENOENT',
    path: '/files/1'
  },
  level: 'error',
  timestamp: '2021-03-24T13:11:55.023Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T13:22:10.399Z'
}
{
  user: 'test@user.com',
  message: 'config is not defined',
  params: { id: '1' },
  path: '/api/ca/objects/1/upload',
  body: {},
  error: ReferenceError: config is not defined
      at Media.uploadFile (/home/arihayri/Projects/oscari-API/app/Media.js:109:31)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)
      at async /home/arihayri/Projects/oscari-API/app/index.js:852:15
      at async /home/arihayri/Projects/oscari-API/app/index.js:154:4
      at async /home/arihayri/Projects/oscari-API/app/index.js:126:2
      at async handleError (/home/arihayri/Projects/oscari-API/app/index.js:101:3)
      at async cors (/home/arihayri/Projects/oscari-API/node_modules/@koa/cors/index.js:98:16)
      at async session (/home/arihayri/Projects/oscari-API/node_modules/koa-session/index.js:41:7),
  level: 'error',
  timestamp: '2021-03-24T13:22:28.186Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T13:23:18.541Z'
}
{
  user: 'test@user.com',
  message: "Collectiveaccess import failed!../files/1/1:1_predictions.jpgError: ENOENT: no such file or directory, open '/import/1:1_predictions.jpg'",
  params: { id: '1' },
  path: '/api/ca/objects/1/upload',
  body: {},
  error: "Collectiveaccess import failed!../files/1/1:1_predictions.jpgError: ENOENT: no such file or directory, open '/import/1:1_predictions.jpg'",
  level: 'error',
  timestamp: '2021-03-24T13:48:13.299Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T13:52:25.577Z'
}
{
  user: 'test@user.com',
  message: "Collectiveaccess import failed!/home/arihayri/Pictures/import/1/1:1_predictions.jpgError: ENOENT: no such file or directory, open '/import/1:1_predictions.jpg'",
  params: { id: '1' },
  path: '/api/ca/objects/1/upload',
  body: {},
  error: "Collectiveaccess import failed!/home/arihayri/Pictures/import/1/1:1_predictions.jpgError: ENOENT: no such file or directory, open '/import/1:1_predictions.jpg'",
  level: 'error',
  timestamp: '2021-03-24T13:52:30.669Z'
}
{
  user: 'test@user.com',
  message: "Collectiveaccess import failed!/home/arihayri/Pictures/import/1/1:1_2756_1_representation_3_original.jpgError: ENOENT: no such file or directory, open '/import/1:1_2756_1_representation_3_original.jpg'",
  params: { id: '1' },
  path: '/api/ca/objects/1/upload',
  body: {},
  error: "Collectiveaccess import failed!/home/arihayri/Pictures/import/1/1:1_2756_1_representation_3_original.jpgError: ENOENT: no such file or directory, open '/import/1:1_2756_1_representation_3_original.jpg'",
  level: 'error',
  timestamp: '2021-03-24T13:53:08.596Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T13:58:57.286Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T14:01:58.580Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T14:02:12.494Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T14:02:40.093Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T14:07:59.652Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T14:08:39.312Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T14:09:24.708Z'
}
{
  message: 'Oscari-API started',
  level: 'info',
  timestamp: '2021-03-24T14:09:28.375Z'
}
{
  user: 'test@user.com',
  message: "ENOENT: no such file or directory, mkdir '/files/1'",
  params: { id: '1' },
  path: '/api/ca/objects/1/upload',
  body: {},
  error: Error: ENOENT: no such file or directory, mkdir '/files/1'
      at Object.mkdirSync (fs.js:921:3)
      at Media.uploadFile (/home/arihayri/Projects/oscari-API/app/Media.js:130:7)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)
      at async /home/arihayri/Projects/oscari-API/app/index.js:852:15
      at async /home/arihayri/Projects/oscari-API/app/index.js:154:4
      at async /home/arihayri/Projects/oscari-API/app/index.js:126:2
      at async handleError (/home/arihayri/Projects/oscari-API/app/index.js:101:3)
      at async cors (/home/arihayri/Projects/oscari-API/node_modules/@koa/cors/index.js:98:16)
      at async session (/home/arihayri/Projects/oscari-API/node_modules/koa-session/index.js:41:7) {
    errno: -2,
    syscall: 'mkdir',
    code: 'ENOENT',
    path: '/files/1'
  },
  level: 'error',
  timestamp: '2021-03-24T14:10:08.745Z'
}
